#!/usr/bin/env ruby

#path/to/jruby -S script/import path/to/source_file.rdf model=application_name format=rdfxml

args = ARGV.map{|arg| arg.split("=")}
file = args.delete_at(0)
options = {}
for arg in args do
  options[arg.first] = arg.last
end

model   = options['model']
# format  = options['format'].nil? ? 'rdfxml' : options['format']

unless File.exists?("applications/#{model}")
  raise "There is no '#{model}' application here. Check if the name is correct."
end

#unless ['rdfxml', 'n3', 'ntriples', 'turtle'].include?(format)
#  raise "'#{format.to_s}' format is not valid"
#end

puts "Loading Rails environment..."

require File.expand_path('../../config/boot',  __FILE__)

Rails::Initializer.run do |config|
  config.frameworks -= [ :active_record , :active_resource, :action_mailer ]
  config.time_zone = 'UTC'
end

require 'active_rdf'
	
context = options['context'].nil? ? nil : RDFS::Resource.new(options['context'])
puts options['model']
app    = Application.find(model)
app.start

puts "Importing..."

json = '{
    "namespaces": {
        "nm1": "http://local/n/",
        "nm2": "http://local/n2/"
    },
    "resources": [
        {
            "uri": "NM1::object_prop2",
            "rdf::type": "RDF::Property",
            "rdfs::domain": "NM1::Classe1"             
        },
        {
            "uri": "NM1::resource3",           
            "nm1::object_prop2": "NM1::resource2"            
        },
        {
            "uri": "NM1::resource1",
            "rdf::type": "NM1::Classe1",
            "nm1::single_valued_prop": "single value",
            "nm1::multivalued_valued_prop": [
                "value1",
                "value2",
                "value3"
            ],
            "nm1::object_prop1": [
                "NM1::resource2"
            ]
        },
        {
            "uri": "NM1::resource2",
            "rdf::type": "NM1::Classe2",
            "nm1::single_valued_prop": "single value",
            "nm1::int_prop": 1,
            "nm1::multivalued_valued_prop": [
                "value1",
                "value2",
                "value3"
            ]            
        }
        
    ]
}'
parsed_json = JSON.parse(json)
elements = []
parsed_json['namespaces'].each_key{|prefix|
  uri = parsed_json['namespaces'][prefix]
  ActiveRDF::Namespace.register(eval(":#{prefix}"), uri)
}

parsed_json['resources'].each{|instance_hash|
  resource = RDF::Resource.new(eval(instance_hash.delete('uri')).to_s)
  resource.destroy

}

app.shutdown

puts "Finished."
